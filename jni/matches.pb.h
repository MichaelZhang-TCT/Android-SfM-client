// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matches.proto

#ifndef PROTOBUF_matches_2eproto__INCLUDED
#define PROTOBUF_matches_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace sfm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_matches_2eproto();
void protobuf_AssignDesc_matches_2eproto();
void protobuf_ShutdownFile_matches_2eproto();

class DMatches;
class MatchesProto;

// ===================================================================

class DMatches : public ::google::protobuf::Message {
 public:
  DMatches();
  virtual ~DMatches();
  
  DMatches(const DMatches& from);
  
  inline DMatches& operator=(const DMatches& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DMatches& default_instance();
  
  void Swap(DMatches* other);
  
  // implements Message ----------------------------------------------
  
  DMatches* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DMatches& from);
  void MergeFrom(const DMatches& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 queryIdx = 1;
  inline bool has_queryidx() const;
  inline void clear_queryidx();
  static const int kQueryIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 queryidx() const;
  inline void set_queryidx(::google::protobuf::uint32 value);
  
  // optional uint32 trainIdx = 2;
  inline bool has_trainidx() const;
  inline void clear_trainidx();
  static const int kTrainIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 trainidx() const;
  inline void set_trainidx(::google::protobuf::uint32 value);
  
  // optional uint32 imgIdx = 3;
  inline bool has_imgidx() const;
  inline void clear_imgidx();
  static const int kImgIdxFieldNumber = 3;
  inline ::google::protobuf::uint32 imgidx() const;
  inline void set_imgidx(::google::protobuf::uint32 value);
  
  // optional float distance = 4;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 4;
  inline float distance() const;
  inline void set_distance(float value);
  
  // @@protoc_insertion_point(class_scope:sfm.DMatches)
 private:
  inline void set_has_queryidx();
  inline void clear_has_queryidx();
  inline void set_has_trainidx();
  inline void clear_has_trainidx();
  inline void set_has_imgidx();
  inline void clear_has_imgidx();
  inline void set_has_distance();
  inline void clear_has_distance();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 queryidx_;
  ::google::protobuf::uint32 trainidx_;
  ::google::protobuf::uint32 imgidx_;
  float distance_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_matches_2eproto();
  friend void protobuf_AssignDesc_matches_2eproto();
  friend void protobuf_ShutdownFile_matches_2eproto();
  
  void InitAsDefaultInstance();
  static DMatches* default_instance_;
};
// -------------------------------------------------------------------

class MatchesProto : public ::google::protobuf::Message {
 public:
  MatchesProto();
  virtual ~MatchesProto();
  
  MatchesProto(const MatchesProto& from);
  
  inline MatchesProto& operator=(const MatchesProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchesProto& default_instance();
  
  void Swap(MatchesProto* other);
  
  // implements Message ----------------------------------------------
  
  MatchesProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchesProto& from);
  void MergeFrom(const MatchesProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 imageLseq = 1;
  inline bool has_imagelseq() const;
  inline void clear_imagelseq();
  static const int kImageLseqFieldNumber = 1;
  inline ::google::protobuf::uint64 imagelseq() const;
  inline void set_imagelseq(::google::protobuf::uint64 value);
  
  // optional fixed64 imageRseq = 2;
  inline bool has_imagerseq() const;
  inline void clear_imagerseq();
  static const int kImageRseqFieldNumber = 2;
  inline ::google::protobuf::uint64 imagerseq() const;
  inline void set_imagerseq(::google::protobuf::uint64 value);
  
  // repeated .sfm.DMatches matches = 3;
  inline int matches_size() const;
  inline void clear_matches();
  static const int kMatchesFieldNumber = 3;
  inline const ::sfm::DMatches& matches(int index) const;
  inline ::sfm::DMatches* mutable_matches(int index);
  inline ::sfm::DMatches* add_matches();
  inline const ::google::protobuf::RepeatedPtrField< ::sfm::DMatches >&
      matches() const;
  inline ::google::protobuf::RepeatedPtrField< ::sfm::DMatches >*
      mutable_matches();
  
  // @@protoc_insertion_point(class_scope:sfm.MatchesProto)
 private:
  inline void set_has_imagelseq();
  inline void clear_has_imagelseq();
  inline void set_has_imagerseq();
  inline void clear_has_imagerseq();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 imagelseq_;
  ::google::protobuf::uint64 imagerseq_;
  ::google::protobuf::RepeatedPtrField< ::sfm::DMatches > matches_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_matches_2eproto();
  friend void protobuf_AssignDesc_matches_2eproto();
  friend void protobuf_ShutdownFile_matches_2eproto();
  
  void InitAsDefaultInstance();
  static MatchesProto* default_instance_;
};
// ===================================================================


// ===================================================================

// DMatches

// optional uint32 queryIdx = 1;
inline bool DMatches::has_queryidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DMatches::set_has_queryidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DMatches::clear_has_queryidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DMatches::clear_queryidx() {
  queryidx_ = 0u;
  clear_has_queryidx();
}
inline ::google::protobuf::uint32 DMatches::queryidx() const {
  return queryidx_;
}
inline void DMatches::set_queryidx(::google::protobuf::uint32 value) {
  set_has_queryidx();
  queryidx_ = value;
}

// optional uint32 trainIdx = 2;
inline bool DMatches::has_trainidx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DMatches::set_has_trainidx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DMatches::clear_has_trainidx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DMatches::clear_trainidx() {
  trainidx_ = 0u;
  clear_has_trainidx();
}
inline ::google::protobuf::uint32 DMatches::trainidx() const {
  return trainidx_;
}
inline void DMatches::set_trainidx(::google::protobuf::uint32 value) {
  set_has_trainidx();
  trainidx_ = value;
}

// optional uint32 imgIdx = 3;
inline bool DMatches::has_imgidx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DMatches::set_has_imgidx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DMatches::clear_has_imgidx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DMatches::clear_imgidx() {
  imgidx_ = 0u;
  clear_has_imgidx();
}
inline ::google::protobuf::uint32 DMatches::imgidx() const {
  return imgidx_;
}
inline void DMatches::set_imgidx(::google::protobuf::uint32 value) {
  set_has_imgidx();
  imgidx_ = value;
}

// optional float distance = 4;
inline bool DMatches::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DMatches::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DMatches::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DMatches::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float DMatches::distance() const {
  return distance_;
}
inline void DMatches::set_distance(float value) {
  set_has_distance();
  distance_ = value;
}

// -------------------------------------------------------------------

// MatchesProto

// optional fixed64 imageLseq = 1;
inline bool MatchesProto::has_imagelseq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchesProto::set_has_imagelseq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchesProto::clear_has_imagelseq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchesProto::clear_imagelseq() {
  imagelseq_ = GOOGLE_ULONGLONG(0);
  clear_has_imagelseq();
}
inline ::google::protobuf::uint64 MatchesProto::imagelseq() const {
  return imagelseq_;
}
inline void MatchesProto::set_imagelseq(::google::protobuf::uint64 value) {
  set_has_imagelseq();
  imagelseq_ = value;
}

// optional fixed64 imageRseq = 2;
inline bool MatchesProto::has_imagerseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchesProto::set_has_imagerseq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchesProto::clear_has_imagerseq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchesProto::clear_imagerseq() {
  imagerseq_ = GOOGLE_ULONGLONG(0);
  clear_has_imagerseq();
}
inline ::google::protobuf::uint64 MatchesProto::imagerseq() const {
  return imagerseq_;
}
inline void MatchesProto::set_imagerseq(::google::protobuf::uint64 value) {
  set_has_imagerseq();
  imagerseq_ = value;
}

// repeated .sfm.DMatches matches = 3;
inline int MatchesProto::matches_size() const {
  return matches_.size();
}
inline void MatchesProto::clear_matches() {
  matches_.Clear();
}
inline const ::sfm::DMatches& MatchesProto::matches(int index) const {
  return matches_.Get(index);
}
inline ::sfm::DMatches* MatchesProto::mutable_matches(int index) {
  return matches_.Mutable(index);
}
inline ::sfm::DMatches* MatchesProto::add_matches() {
  return matches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sfm::DMatches >&
MatchesProto::matches() const {
  return matches_;
}
inline ::google::protobuf::RepeatedPtrField< ::sfm::DMatches >*
MatchesProto::mutable_matches() {
  return &matches_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sfm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_matches_2eproto__INCLUDED
