// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sfm {

namespace {

const ::google::protobuf::Descriptor* CvMatDimProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CvMatDimProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* cvMatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cvMatProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* cvMatProto_ImageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Keypoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Keypoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* Keypoints_cvKeypoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Keypoints_cvKeypoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraMatrixProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraMatrixProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraBodyTransProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraBodyTransProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetadataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetadataProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MetadataProto_SensorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CvRectProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CvRectProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  CvMatDimProto_descriptor_ = file->message_type(0);
  static const int CvMatDimProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvMatDimProto, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvMatDimProto, step_),
  };
  CvMatDimProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CvMatDimProto_descriptor_,
      CvMatDimProto::default_instance_,
      CvMatDimProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvMatDimProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvMatDimProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CvMatDimProto));
  cvMatProto_descriptor_ = file->message_type(1);
  static const int cvMatProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cvMatProto, n_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cvMatProto, dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cvMatProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cvMatProto, bytedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cvMatProto, format_),
  };
  cvMatProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cvMatProto_descriptor_,
      cvMatProto::default_instance_,
      cvMatProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cvMatProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cvMatProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cvMatProto));
  cvMatProto_ImageType_descriptor_ = cvMatProto_descriptor_->enum_type(0);
  Keypoints_descriptor_ = file->message_type(2);
  static const int Keypoints_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints, keypoints_),
  };
  Keypoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Keypoints_descriptor_,
      Keypoints::default_instance_,
      Keypoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Keypoints));
  Keypoints_cvKeypoint_descriptor_ = Keypoints_descriptor_->nested_type(0);
  static const int Keypoints_cvKeypoint_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints_cvKeypoint, ptx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints_cvKeypoint, pty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints_cvKeypoint, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints_cvKeypoint, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints_cvKeypoint, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints_cvKeypoint, octave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints_cvKeypoint, class_id_),
  };
  Keypoints_cvKeypoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Keypoints_cvKeypoint_descriptor_,
      Keypoints_cvKeypoint::default_instance_,
      Keypoints_cvKeypoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints_cvKeypoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Keypoints_cvKeypoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Keypoints_cvKeypoint));
  CameraMatrixProto_descriptor_ = file->message_type(3);
  static const int CameraMatrixProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrixProto, data_),
  };
  CameraMatrixProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraMatrixProto_descriptor_,
      CameraMatrixProto::default_instance_,
      CameraMatrixProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrixProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrixProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraMatrixProto));
  CameraBodyTransProto_descriptor_ = file->message_type(4);
  static const int CameraBodyTransProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraBodyTransProto, data_),
  };
  CameraBodyTransProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraBodyTransProto_descriptor_,
      CameraBodyTransProto::default_instance_,
      CameraBodyTransProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraBodyTransProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraBodyTransProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraBodyTransProto));
  MetadataProto_descriptor_ = file->message_type(5);
  static const int MetadataProto_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, ang_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, ang_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, ang_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, pos_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, val_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, val_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, val_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, type_),
  };
  MetadataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetadataProto_descriptor_,
      MetadataProto::default_instance_,
      MetadataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetadataProto));
  MetadataProto_SensorType_descriptor_ = MetadataProto_descriptor_->enum_type(0);
  CvRectProto_descriptor_ = file->message_type(6);
  static const int CvRectProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvRectProto, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvRectProto, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvRectProto, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvRectProto, height_),
  };
  CvRectProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CvRectProto_descriptor_,
      CvRectProto::default_instance_,
      CvRectProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvRectProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CvRectProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CvRectProto));
  FrameProto_descriptor_ = file->message_type(7);
  static const int FrameProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, cameramatrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, camerabodytrans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, baseline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, roi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, keypoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, descriptors_),
  };
  FrameProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameProto_descriptor_,
      FrameProto::default_instance_,
      FrameProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CvMatDimProto_descriptor_, &CvMatDimProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cvMatProto_descriptor_, &cvMatProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Keypoints_descriptor_, &Keypoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Keypoints_cvKeypoint_descriptor_, &Keypoints_cvKeypoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraMatrixProto_descriptor_, &CameraMatrixProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraBodyTransProto_descriptor_, &CameraBodyTransProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetadataProto_descriptor_, &MetadataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CvRectProto_descriptor_, &CvRectProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameProto_descriptor_, &FrameProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete CvMatDimProto::default_instance_;
  delete CvMatDimProto_reflection_;
  delete cvMatProto::default_instance_;
  delete cvMatProto_reflection_;
  delete Keypoints::default_instance_;
  delete Keypoints_reflection_;
  delete Keypoints_cvKeypoint::default_instance_;
  delete Keypoints_cvKeypoint_reflection_;
  delete CameraMatrixProto::default_instance_;
  delete CameraMatrixProto_reflection_;
  delete CameraBodyTransProto::default_instance_;
  delete CameraBodyTransProto_reflection_;
  delete MetadataProto::default_instance_;
  delete MetadataProto_reflection_;
  delete CvRectProto::default_instance_;
  delete CvRectProto_reflection_;
  delete FrameProto::default_instance_;
  delete FrameProto_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\022\003sfm\"+\n\rCvMatDimProto\022\014\n\004si"
    "ze\030\001 \001(\005\022\014\n\004step\030\002 \001(\005\"\273\001\n\ncvMatProto\022\016\n"
    "\006n_dims\030\001 \001(\005\022 \n\004dims\030\002 \003(\0132\022.sfm.CvMatD"
    "imProto\022\014\n\004type\030\003 \001(\005\022\020\n\010bytedata\030\004 \001(\014\022"
    "0\n\006format\030\005 \001(\0162\031.sfm.cvMatProto.ImageTy"
    "pe:\005cvMat\")\n\tImageType\022\t\n\005cvMat\020\000\022\010\n\004JPE"
    "G\020\001\022\007\n\003RAW\020\002\"\266\001\n\tKeypoints\022,\n\tkeypoints\030"
    "\001 \003(\0132\031.sfm.Keypoints.cvKeypoint\032{\n\ncvKe"
    "ypoint\022\013\n\003ptX\030\001 \001(\002\022\013\n\003ptY\030\002 \001(\002\022\014\n\004size"
    "\030\003 \001(\002\022\021\n\005angle\030\004 \001(\002:\002-1\022\020\n\010response\030\005 "
    "\001(\002\022\016\n\006octave\030\006 \001(\005\022\020\n\010class_id\030\007 \001(\005\"!\n"
    "\021CameraMatrixProto\022\014\n\004data\030\001 \003(\002\"$\n\024Came"
    "raBodyTransProto\022\014\n\004data\030\001 \003(\002\"\310\002\n\rMetad"
    "ataProto\022\r\n\005ang_x\030\001 \001(\002\022\r\n\005ang_y\030\002 \001(\002\022\r"
    "\n\005ang_z\030\003 \001(\002\022\r\n\005pos_x\030\004 \001(\002\022\r\n\005pos_y\030\005 "
    "\001(\002\022\r\n\005pos_z\030\006 \001(\002\022\021\n\ttimestamp\030\007 \001(\006\022\r\n"
    "\005val_0\030\010 \001(\002\022\r\n\005val_1\030\t \001(\002\022\r\n\005val_2\030\n \001"
    "(\002\0224\n\004type\030\013 \001(\0162\035.sfm.MetadataProto.Sen"
    "sorType:\007GRAVITY\"g\n\nSensorType\022\t\n\005ACCEL\020"
    "\000\022\010\n\004GYRO\020\001\022\013\n\007MAGNETO\020\002\022\014\n\010LINACCEL\020\003\022\017"
    "\n\013ORIENTATION\020\004\022\013\n\007GRAVITY\020\005\022\013\n\007ROTVECT\020"
    "\006\"B\n\013CvRectProto\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r"
    "\n\005width\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\"\310\002\n\nFrameP"
    "roto\022\037\n\006images\030\001 \003(\0132\017.sfm.cvMatProto\022,\n"
    "\014cameraMatrix\030\002 \001(\0132\026.sfm.CameraMatrixPr"
    "oto\0222\n\017cameraBodyTrans\030\003 \001(\0132\031.sfm.Camer"
    "aBodyTransProto\022$\n\010metadata\030\004 \001(\0132\022.sfm."
    "MetadataProto\022\n\n\002id\030\005 \001(\006\022\013\n\003seq\030\006 \001(\006\022\020"
    "\n\010baseline\030\010 \001(\002\022\035\n\003roi\030\t \001(\0132\020.sfm.CvRe"
    "ctProto\022!\n\tkeypoints\030\n \001(\0132\016.sfm.Keypoin"
    "ts\022$\n\013descriptors\030\013 \001(\0132\017.sfm.cvMatProto"
    "B*\n\024cvg.sfmPipeline.mainB\022PipelineOutMes"
    "sage", 1284);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  CvMatDimProto::default_instance_ = new CvMatDimProto();
  cvMatProto::default_instance_ = new cvMatProto();
  Keypoints::default_instance_ = new Keypoints();
  Keypoints_cvKeypoint::default_instance_ = new Keypoints_cvKeypoint();
  CameraMatrixProto::default_instance_ = new CameraMatrixProto();
  CameraBodyTransProto::default_instance_ = new CameraBodyTransProto();
  MetadataProto::default_instance_ = new MetadataProto();
  CvRectProto::default_instance_ = new CvRectProto();
  FrameProto::default_instance_ = new FrameProto();
  CvMatDimProto::default_instance_->InitAsDefaultInstance();
  cvMatProto::default_instance_->InitAsDefaultInstance();
  Keypoints::default_instance_->InitAsDefaultInstance();
  Keypoints_cvKeypoint::default_instance_->InitAsDefaultInstance();
  CameraMatrixProto::default_instance_->InitAsDefaultInstance();
  CameraBodyTransProto::default_instance_->InitAsDefaultInstance();
  MetadataProto::default_instance_->InitAsDefaultInstance();
  CvRectProto::default_instance_->InitAsDefaultInstance();
  FrameProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CvMatDimProto::kSizeFieldNumber;
const int CvMatDimProto::kStepFieldNumber;
#endif  // !_MSC_VER

CvMatDimProto::CvMatDimProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CvMatDimProto::InitAsDefaultInstance() {
}

CvMatDimProto::CvMatDimProto(const CvMatDimProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CvMatDimProto::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CvMatDimProto::~CvMatDimProto() {
  SharedDtor();
}

void CvMatDimProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CvMatDimProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CvMatDimProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CvMatDimProto_descriptor_;
}

const CvMatDimProto& CvMatDimProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

CvMatDimProto* CvMatDimProto::default_instance_ = NULL;

CvMatDimProto* CvMatDimProto::New() const {
  return new CvMatDimProto;
}

void CvMatDimProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0;
    step_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CvMatDimProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }
      
      // optional int32 step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CvMatDimProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }
  
  // optional int32 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->step(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CvMatDimProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }
  
  // optional int32 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->step(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CvMatDimProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
    // optional int32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CvMatDimProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CvMatDimProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CvMatDimProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CvMatDimProto::MergeFrom(const CvMatDimProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CvMatDimProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CvMatDimProto::CopyFrom(const CvMatDimProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CvMatDimProto::IsInitialized() const {
  
  return true;
}

void CvMatDimProto::Swap(CvMatDimProto* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CvMatDimProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CvMatDimProto_descriptor_;
  metadata.reflection = CvMatDimProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* cvMatProto_ImageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cvMatProto_ImageType_descriptor_;
}
bool cvMatProto_ImageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const cvMatProto_ImageType cvMatProto::cvMat;
const cvMatProto_ImageType cvMatProto::JPEG;
const cvMatProto_ImageType cvMatProto::RAW;
const cvMatProto_ImageType cvMatProto::ImageType_MIN;
const cvMatProto_ImageType cvMatProto::ImageType_MAX;
const int cvMatProto::ImageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int cvMatProto::kNDimsFieldNumber;
const int cvMatProto::kDimsFieldNumber;
const int cvMatProto::kTypeFieldNumber;
const int cvMatProto::kBytedataFieldNumber;
const int cvMatProto::kFormatFieldNumber;
#endif  // !_MSC_VER

cvMatProto::cvMatProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cvMatProto::InitAsDefaultInstance() {
}

cvMatProto::cvMatProto(const cvMatProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cvMatProto::SharedCtor() {
  _cached_size_ = 0;
  n_dims_ = 0;
  type_ = 0;
  bytedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  format_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cvMatProto::~cvMatProto() {
  SharedDtor();
}

void cvMatProto::SharedDtor() {
  if (bytedata_ != &::google::protobuf::internal::kEmptyString) {
    delete bytedata_;
  }
  if (this != default_instance_) {
  }
}

void cvMatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cvMatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cvMatProto_descriptor_;
}

const cvMatProto& cvMatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

cvMatProto* cvMatProto::default_instance_ = NULL;

cvMatProto* cvMatProto::New() const {
  return new cvMatProto;
}

void cvMatProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    n_dims_ = 0;
    type_ = 0;
    if (has_bytedata()) {
      if (bytedata_ != &::google::protobuf::internal::kEmptyString) {
        bytedata_->clear();
      }
    }
    format_ = 0;
  }
  dims_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cvMatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 n_dims = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_dims_)));
          set_has_n_dims();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dims;
        break;
      }
      
      // repeated .sfm.CvMatDimProto dims = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dims:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dims()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dims;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bytedata;
        break;
      }
      
      // optional bytes bytedata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_format;
        break;
      }
      
      // optional .sfm.cvMatProto.ImageType format = 5 [default = cvMat];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sfm::cvMatProto_ImageType_IsValid(value)) {
            set_format(static_cast< ::sfm::cvMatProto_ImageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cvMatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 n_dims = 1;
  if (has_n_dims()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->n_dims(), output);
  }
  
  // repeated .sfm.CvMatDimProto dims = 2;
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dims(i), output);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional bytes bytedata = 4;
  if (has_bytedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->bytedata(), output);
  }
  
  // optional .sfm.cvMatProto.ImageType format = 5 [default = cvMat];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->format(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cvMatProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 n_dims = 1;
  if (has_n_dims()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->n_dims(), target);
  }
  
  // repeated .sfm.CvMatDimProto dims = 2;
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dims(i), target);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional bytes bytedata = 4;
  if (has_bytedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bytedata(), target);
  }
  
  // optional .sfm.cvMatProto.ImageType format = 5 [default = cvMat];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->format(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cvMatProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 n_dims = 1;
    if (has_n_dims()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n_dims());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional bytes bytedata = 4;
    if (has_bytedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytedata());
    }
    
    // optional .sfm.cvMatProto.ImageType format = 5 [default = cvMat];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }
    
  }
  // repeated .sfm.CvMatDimProto dims = 2;
  total_size += 1 * this->dims_size();
  for (int i = 0; i < this->dims_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dims(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cvMatProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cvMatProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cvMatProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cvMatProto::MergeFrom(const cvMatProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  dims_.MergeFrom(from.dims_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n_dims()) {
      set_n_dims(from.n_dims());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bytedata()) {
      set_bytedata(from.bytedata());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cvMatProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cvMatProto::CopyFrom(const cvMatProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cvMatProto::IsInitialized() const {
  
  return true;
}

void cvMatProto::Swap(cvMatProto* other) {
  if (other != this) {
    std::swap(n_dims_, other->n_dims_);
    dims_.Swap(&other->dims_);
    std::swap(type_, other->type_);
    std::swap(bytedata_, other->bytedata_);
    std::swap(format_, other->format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cvMatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cvMatProto_descriptor_;
  metadata.reflection = cvMatProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Keypoints_cvKeypoint::kPtXFieldNumber;
const int Keypoints_cvKeypoint::kPtYFieldNumber;
const int Keypoints_cvKeypoint::kSizeFieldNumber;
const int Keypoints_cvKeypoint::kAngleFieldNumber;
const int Keypoints_cvKeypoint::kResponseFieldNumber;
const int Keypoints_cvKeypoint::kOctaveFieldNumber;
const int Keypoints_cvKeypoint::kClassIdFieldNumber;
#endif  // !_MSC_VER

Keypoints_cvKeypoint::Keypoints_cvKeypoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Keypoints_cvKeypoint::InitAsDefaultInstance() {
}

Keypoints_cvKeypoint::Keypoints_cvKeypoint(const Keypoints_cvKeypoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Keypoints_cvKeypoint::SharedCtor() {
  _cached_size_ = 0;
  ptx_ = 0;
  pty_ = 0;
  size_ = 0;
  angle_ = -1;
  response_ = 0;
  octave_ = 0;
  class_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Keypoints_cvKeypoint::~Keypoints_cvKeypoint() {
  SharedDtor();
}

void Keypoints_cvKeypoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Keypoints_cvKeypoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Keypoints_cvKeypoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Keypoints_cvKeypoint_descriptor_;
}

const Keypoints_cvKeypoint& Keypoints_cvKeypoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Keypoints_cvKeypoint* Keypoints_cvKeypoint::default_instance_ = NULL;

Keypoints_cvKeypoint* Keypoints_cvKeypoint::New() const {
  return new Keypoints_cvKeypoint;
}

void Keypoints_cvKeypoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ptx_ = 0;
    pty_ = 0;
    size_ = 0;
    angle_ = -1;
    response_ = 0;
    octave_ = 0;
    class_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Keypoints_cvKeypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ptX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ptx_)));
          set_has_ptx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ptY;
        break;
      }
      
      // optional float ptY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ptY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pty_)));
          set_has_pty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_size;
        break;
      }
      
      // optional float size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_angle;
        break;
      }
      
      // optional float angle = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_response;
        break;
      }
      
      // optional float response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_octave;
        break;
      }
      
      // optional int32 octave = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_octave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &octave_)));
          set_has_octave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_class_id;
        break;
      }
      
      // optional int32 class_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_class_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Keypoints_cvKeypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float ptX = 1;
  if (has_ptx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ptx(), output);
  }
  
  // optional float ptY = 2;
  if (has_pty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pty(), output);
  }
  
  // optional float size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->size(), output);
  }
  
  // optional float angle = 4 [default = -1];
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle(), output);
  }
  
  // optional float response = 5;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->response(), output);
  }
  
  // optional int32 octave = 6;
  if (has_octave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->octave(), output);
  }
  
  // optional int32 class_id = 7;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->class_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Keypoints_cvKeypoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float ptX = 1;
  if (has_ptx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ptx(), target);
  }
  
  // optional float ptY = 2;
  if (has_pty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pty(), target);
  }
  
  // optional float size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->size(), target);
  }
  
  // optional float angle = 4 [default = -1];
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle(), target);
  }
  
  // optional float response = 5;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->response(), target);
  }
  
  // optional int32 octave = 6;
  if (has_octave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->octave(), target);
  }
  
  // optional int32 class_id = 7;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->class_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Keypoints_cvKeypoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float ptX = 1;
    if (has_ptx()) {
      total_size += 1 + 4;
    }
    
    // optional float ptY = 2;
    if (has_pty()) {
      total_size += 1 + 4;
    }
    
    // optional float size = 3;
    if (has_size()) {
      total_size += 1 + 4;
    }
    
    // optional float angle = 4 [default = -1];
    if (has_angle()) {
      total_size += 1 + 4;
    }
    
    // optional float response = 5;
    if (has_response()) {
      total_size += 1 + 4;
    }
    
    // optional int32 octave = 6;
    if (has_octave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->octave());
    }
    
    // optional int32 class_id = 7;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Keypoints_cvKeypoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Keypoints_cvKeypoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Keypoints_cvKeypoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Keypoints_cvKeypoint::MergeFrom(const Keypoints_cvKeypoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptx()) {
      set_ptx(from.ptx());
    }
    if (from.has_pty()) {
      set_pty(from.pty());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_octave()) {
      set_octave(from.octave());
    }
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Keypoints_cvKeypoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Keypoints_cvKeypoint::CopyFrom(const Keypoints_cvKeypoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keypoints_cvKeypoint::IsInitialized() const {
  
  return true;
}

void Keypoints_cvKeypoint::Swap(Keypoints_cvKeypoint* other) {
  if (other != this) {
    std::swap(ptx_, other->ptx_);
    std::swap(pty_, other->pty_);
    std::swap(size_, other->size_);
    std::swap(angle_, other->angle_);
    std::swap(response_, other->response_);
    std::swap(octave_, other->octave_);
    std::swap(class_id_, other->class_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Keypoints_cvKeypoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Keypoints_cvKeypoint_descriptor_;
  metadata.reflection = Keypoints_cvKeypoint_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Keypoints::kKeypointsFieldNumber;
#endif  // !_MSC_VER

Keypoints::Keypoints()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Keypoints::InitAsDefaultInstance() {
}

Keypoints::Keypoints(const Keypoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Keypoints::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Keypoints::~Keypoints() {
  SharedDtor();
}

void Keypoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Keypoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Keypoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Keypoints_descriptor_;
}

const Keypoints& Keypoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Keypoints* Keypoints::default_instance_ = NULL;

Keypoints* Keypoints::New() const {
  return new Keypoints;
}

void Keypoints::Clear() {
  keypoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Keypoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sfm.Keypoints.cvKeypoint keypoints = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keypoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keypoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keypoints;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Keypoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sfm.Keypoints.cvKeypoint keypoints = 1;
  for (int i = 0; i < this->keypoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keypoints(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Keypoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sfm.Keypoints.cvKeypoint keypoints = 1;
  for (int i = 0; i < this->keypoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keypoints(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Keypoints::ByteSize() const {
  int total_size = 0;
  
  // repeated .sfm.Keypoints.cvKeypoint keypoints = 1;
  total_size += 1 * this->keypoints_size();
  for (int i = 0; i < this->keypoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keypoints(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Keypoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Keypoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Keypoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Keypoints::MergeFrom(const Keypoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  keypoints_.MergeFrom(from.keypoints_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Keypoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Keypoints::CopyFrom(const Keypoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keypoints::IsInitialized() const {
  
  return true;
}

void Keypoints::Swap(Keypoints* other) {
  if (other != this) {
    keypoints_.Swap(&other->keypoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Keypoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Keypoints_descriptor_;
  metadata.reflection = Keypoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraMatrixProto::kDataFieldNumber;
#endif  // !_MSC_VER

CameraMatrixProto::CameraMatrixProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraMatrixProto::InitAsDefaultInstance() {
}

CameraMatrixProto::CameraMatrixProto(const CameraMatrixProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraMatrixProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraMatrixProto::~CameraMatrixProto() {
  SharedDtor();
}

void CameraMatrixProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraMatrixProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraMatrixProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraMatrixProto_descriptor_;
}

const CameraMatrixProto& CameraMatrixProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

CameraMatrixProto* CameraMatrixProto::default_instance_ = NULL;

CameraMatrixProto* CameraMatrixProto::New() const {
  return new CameraMatrixProto;
}

void CameraMatrixProto::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraMatrixProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraMatrixProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraMatrixProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraMatrixProto::ByteSize() const {
  int total_size = 0;
  
  // repeated float data = 1;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraMatrixProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraMatrixProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraMatrixProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraMatrixProto::MergeFrom(const CameraMatrixProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraMatrixProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraMatrixProto::CopyFrom(const CameraMatrixProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMatrixProto::IsInitialized() const {
  
  return true;
}

void CameraMatrixProto::Swap(CameraMatrixProto* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraMatrixProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraMatrixProto_descriptor_;
  metadata.reflection = CameraMatrixProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraBodyTransProto::kDataFieldNumber;
#endif  // !_MSC_VER

CameraBodyTransProto::CameraBodyTransProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraBodyTransProto::InitAsDefaultInstance() {
}

CameraBodyTransProto::CameraBodyTransProto(const CameraBodyTransProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraBodyTransProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraBodyTransProto::~CameraBodyTransProto() {
  SharedDtor();
}

void CameraBodyTransProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraBodyTransProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraBodyTransProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraBodyTransProto_descriptor_;
}

const CameraBodyTransProto& CameraBodyTransProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

CameraBodyTransProto* CameraBodyTransProto::default_instance_ = NULL;

CameraBodyTransProto* CameraBodyTransProto::New() const {
  return new CameraBodyTransProto;
}

void CameraBodyTransProto::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraBodyTransProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraBodyTransProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraBodyTransProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraBodyTransProto::ByteSize() const {
  int total_size = 0;
  
  // repeated float data = 1;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraBodyTransProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraBodyTransProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraBodyTransProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraBodyTransProto::MergeFrom(const CameraBodyTransProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraBodyTransProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraBodyTransProto::CopyFrom(const CameraBodyTransProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraBodyTransProto::IsInitialized() const {
  
  return true;
}

void CameraBodyTransProto::Swap(CameraBodyTransProto* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraBodyTransProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraBodyTransProto_descriptor_;
  metadata.reflection = CameraBodyTransProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MetadataProto_SensorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetadataProto_SensorType_descriptor_;
}
bool MetadataProto_SensorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MetadataProto_SensorType MetadataProto::ACCEL;
const MetadataProto_SensorType MetadataProto::GYRO;
const MetadataProto_SensorType MetadataProto::MAGNETO;
const MetadataProto_SensorType MetadataProto::LINACCEL;
const MetadataProto_SensorType MetadataProto::ORIENTATION;
const MetadataProto_SensorType MetadataProto::GRAVITY;
const MetadataProto_SensorType MetadataProto::ROTVECT;
const MetadataProto_SensorType MetadataProto::SensorType_MIN;
const MetadataProto_SensorType MetadataProto::SensorType_MAX;
const int MetadataProto::SensorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MetadataProto::kAngXFieldNumber;
const int MetadataProto::kAngYFieldNumber;
const int MetadataProto::kAngZFieldNumber;
const int MetadataProto::kPosXFieldNumber;
const int MetadataProto::kPosYFieldNumber;
const int MetadataProto::kPosZFieldNumber;
const int MetadataProto::kTimestampFieldNumber;
const int MetadataProto::kVal0FieldNumber;
const int MetadataProto::kVal1FieldNumber;
const int MetadataProto::kVal2FieldNumber;
const int MetadataProto::kTypeFieldNumber;
#endif  // !_MSC_VER

MetadataProto::MetadataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetadataProto::InitAsDefaultInstance() {
}

MetadataProto::MetadataProto(const MetadataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetadataProto::SharedCtor() {
  _cached_size_ = 0;
  ang_x_ = 0;
  ang_y_ = 0;
  ang_z_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  pos_z_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  val_0_ = 0;
  val_1_ = 0;
  val_2_ = 0;
  type_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetadataProto::~MetadataProto() {
  SharedDtor();
}

void MetadataProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetadataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetadataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetadataProto_descriptor_;
}

const MetadataProto& MetadataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

MetadataProto* MetadataProto::default_instance_ = NULL;

MetadataProto* MetadataProto::New() const {
  return new MetadataProto;
}

void MetadataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ang_x_ = 0;
    ang_y_ = 0;
    ang_z_ = 0;
    pos_x_ = 0;
    pos_y_ = 0;
    pos_z_ = 0;
    timestamp_ = GOOGLE_ULONGLONG(0);
    val_0_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    val_1_ = 0;
    val_2_ = 0;
    type_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetadataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ang_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_x_)));
          set_has_ang_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ang_y;
        break;
      }
      
      // optional float ang_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ang_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_y_)));
          set_has_ang_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ang_z;
        break;
      }
      
      // optional float ang_z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ang_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ang_z_)));
          set_has_ang_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pos_x;
        break;
      }
      
      // optional float pos_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_pos_y;
        break;
      }
      
      // optional float pos_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_pos_z;
        break;
      }
      
      // optional float pos_z = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
          set_has_pos_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_timestamp;
        break;
      }
      
      // optional fixed64 timestamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_val_0;
        break;
      }
      
      // optional float val_0 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_0_)));
          set_has_val_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_val_1;
        break;
      }
      
      // optional float val_1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_1_)));
          set_has_val_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_val_2;
        break;
      }
      
      // optional float val_2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_2_)));
          set_has_val_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_type;
        break;
      }
      
      // optional .sfm.MetadataProto.SensorType type = 11 [default = GRAVITY];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sfm::MetadataProto_SensorType_IsValid(value)) {
            set_type(static_cast< ::sfm::MetadataProto_SensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetadataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float ang_x = 1;
  if (has_ang_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ang_x(), output);
  }
  
  // optional float ang_y = 2;
  if (has_ang_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ang_y(), output);
  }
  
  // optional float ang_z = 3;
  if (has_ang_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ang_z(), output);
  }
  
  // optional float pos_x = 4;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_x(), output);
  }
  
  // optional float pos_y = 5;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pos_y(), output);
  }
  
  // optional float pos_z = 6;
  if (has_pos_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pos_z(), output);
  }
  
  // optional fixed64 timestamp = 7;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->timestamp(), output);
  }
  
  // optional float val_0 = 8;
  if (has_val_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->val_0(), output);
  }
  
  // optional float val_1 = 9;
  if (has_val_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->val_1(), output);
  }
  
  // optional float val_2 = 10;
  if (has_val_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->val_2(), output);
  }
  
  // optional .sfm.MetadataProto.SensorType type = 11 [default = GRAVITY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetadataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float ang_x = 1;
  if (has_ang_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ang_x(), target);
  }
  
  // optional float ang_y = 2;
  if (has_ang_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ang_y(), target);
  }
  
  // optional float ang_z = 3;
  if (has_ang_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ang_z(), target);
  }
  
  // optional float pos_x = 4;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_x(), target);
  }
  
  // optional float pos_y = 5;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pos_y(), target);
  }
  
  // optional float pos_z = 6;
  if (has_pos_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pos_z(), target);
  }
  
  // optional fixed64 timestamp = 7;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->timestamp(), target);
  }
  
  // optional float val_0 = 8;
  if (has_val_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->val_0(), target);
  }
  
  // optional float val_1 = 9;
  if (has_val_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->val_1(), target);
  }
  
  // optional float val_2 = 10;
  if (has_val_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->val_2(), target);
  }
  
  // optional .sfm.MetadataProto.SensorType type = 11 [default = GRAVITY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetadataProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float ang_x = 1;
    if (has_ang_x()) {
      total_size += 1 + 4;
    }
    
    // optional float ang_y = 2;
    if (has_ang_y()) {
      total_size += 1 + 4;
    }
    
    // optional float ang_z = 3;
    if (has_ang_z()) {
      total_size += 1 + 4;
    }
    
    // optional float pos_x = 4;
    if (has_pos_x()) {
      total_size += 1 + 4;
    }
    
    // optional float pos_y = 5;
    if (has_pos_y()) {
      total_size += 1 + 4;
    }
    
    // optional float pos_z = 6;
    if (has_pos_z()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 timestamp = 7;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }
    
    // optional float val_0 = 8;
    if (has_val_0()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float val_1 = 9;
    if (has_val_1()) {
      total_size += 1 + 4;
    }
    
    // optional float val_2 = 10;
    if (has_val_2()) {
      total_size += 1 + 4;
    }
    
    // optional .sfm.MetadataProto.SensorType type = 11 [default = GRAVITY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetadataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetadataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetadataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetadataProto::MergeFrom(const MetadataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ang_x()) {
      set_ang_x(from.ang_x());
    }
    if (from.has_ang_y()) {
      set_ang_y(from.ang_y());
    }
    if (from.has_ang_z()) {
      set_ang_z(from.ang_z());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_pos_z()) {
      set_pos_z(from.pos_z());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_val_0()) {
      set_val_0(from.val_0());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_val_1()) {
      set_val_1(from.val_1());
    }
    if (from.has_val_2()) {
      set_val_2(from.val_2());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetadataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetadataProto::CopyFrom(const MetadataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataProto::IsInitialized() const {
  
  return true;
}

void MetadataProto::Swap(MetadataProto* other) {
  if (other != this) {
    std::swap(ang_x_, other->ang_x_);
    std::swap(ang_y_, other->ang_y_);
    std::swap(ang_z_, other->ang_z_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(pos_z_, other->pos_z_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(val_0_, other->val_0_);
    std::swap(val_1_, other->val_1_);
    std::swap(val_2_, other->val_2_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetadataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetadataProto_descriptor_;
  metadata.reflection = MetadataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CvRectProto::kXFieldNumber;
const int CvRectProto::kYFieldNumber;
const int CvRectProto::kWidthFieldNumber;
const int CvRectProto::kHeightFieldNumber;
#endif  // !_MSC_VER

CvRectProto::CvRectProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CvRectProto::InitAsDefaultInstance() {
}

CvRectProto::CvRectProto(const CvRectProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CvRectProto::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CvRectProto::~CvRectProto() {
  SharedDtor();
}

void CvRectProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CvRectProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CvRectProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CvRectProto_descriptor_;
}

const CvRectProto& CvRectProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

CvRectProto* CvRectProto::default_instance_ = NULL;

CvRectProto* CvRectProto::New() const {
  return new CvRectProto;
}

void CvRectProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CvRectProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // optional int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }
      
      // optional int32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }
      
      // optional int32 height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CvRectProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }
  
  // optional int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CvRectProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }
  
  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }
  
  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }
  
  // optional int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CvRectProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CvRectProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CvRectProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CvRectProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CvRectProto::MergeFrom(const CvRectProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CvRectProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CvRectProto::CopyFrom(const CvRectProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CvRectProto::IsInitialized() const {
  
  return true;
}

void CvRectProto::Swap(CvRectProto* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CvRectProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CvRectProto_descriptor_;
  metadata.reflection = CvRectProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameProto::kImagesFieldNumber;
const int FrameProto::kCameraMatrixFieldNumber;
const int FrameProto::kCameraBodyTransFieldNumber;
const int FrameProto::kMetadataFieldNumber;
const int FrameProto::kIdFieldNumber;
const int FrameProto::kSeqFieldNumber;
const int FrameProto::kBaselineFieldNumber;
const int FrameProto::kRoiFieldNumber;
const int FrameProto::kKeypointsFieldNumber;
const int FrameProto::kDescriptorsFieldNumber;
#endif  // !_MSC_VER

FrameProto::FrameProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameProto::InitAsDefaultInstance() {
  cameramatrix_ = const_cast< ::sfm::CameraMatrixProto*>(&::sfm::CameraMatrixProto::default_instance());
  camerabodytrans_ = const_cast< ::sfm::CameraBodyTransProto*>(&::sfm::CameraBodyTransProto::default_instance());
  metadata_ = const_cast< ::sfm::MetadataProto*>(&::sfm::MetadataProto::default_instance());
  roi_ = const_cast< ::sfm::CvRectProto*>(&::sfm::CvRectProto::default_instance());
  keypoints_ = const_cast< ::sfm::Keypoints*>(&::sfm::Keypoints::default_instance());
  descriptors_ = const_cast< ::sfm::cvMatProto*>(&::sfm::cvMatProto::default_instance());
}

FrameProto::FrameProto(const FrameProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameProto::SharedCtor() {
  _cached_size_ = 0;
  cameramatrix_ = NULL;
  camerabodytrans_ = NULL;
  metadata_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
  seq_ = GOOGLE_ULONGLONG(0);
  baseline_ = 0;
  roi_ = NULL;
  keypoints_ = NULL;
  descriptors_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameProto::~FrameProto() {
  SharedDtor();
}

void FrameProto::SharedDtor() {
  if (this != default_instance_) {
    delete cameramatrix_;
    delete camerabodytrans_;
    delete metadata_;
    delete roi_;
    delete keypoints_;
    delete descriptors_;
  }
}

void FrameProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameProto_descriptor_;
}

const FrameProto& FrameProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

FrameProto* FrameProto::default_instance_ = NULL;

FrameProto* FrameProto::New() const {
  return new FrameProto;
}

void FrameProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_cameramatrix()) {
      if (cameramatrix_ != NULL) cameramatrix_->::sfm::CameraMatrixProto::Clear();
    }
    if (has_camerabodytrans()) {
      if (camerabodytrans_ != NULL) camerabodytrans_->::sfm::CameraBodyTransProto::Clear();
    }
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::sfm::MetadataProto::Clear();
    }
    id_ = GOOGLE_ULONGLONG(0);
    seq_ = GOOGLE_ULONGLONG(0);
    baseline_ = 0;
    if (has_roi()) {
      if (roi_ != NULL) roi_->::sfm::CvRectProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_keypoints()) {
      if (keypoints_ != NULL) keypoints_->::sfm::Keypoints::Clear();
    }
    if (has_descriptors()) {
      if (descriptors_ != NULL) descriptors_->::sfm::cvMatProto::Clear();
    }
  }
  images_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sfm.cvMatProto images = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_images;
        if (input->ExpectTag(18)) goto parse_cameraMatrix;
        break;
      }
      
      // optional .sfm.CameraMatrixProto cameraMatrix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraMatrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameramatrix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cameraBodyTrans;
        break;
      }
      
      // optional .sfm.CameraBodyTransProto cameraBodyTrans = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraBodyTrans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camerabodytrans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_metadata;
        break;
      }
      
      // optional .sfm.MetadataProto metadata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_id;
        break;
      }
      
      // optional fixed64 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_seq;
        break;
      }
      
      // optional fixed64 seq = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_baseline;
        break;
      }
      
      // optional float baseline = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_baseline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &baseline_)));
          set_has_baseline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_roi;
        break;
      }
      
      // optional .sfm.CvRectProto roi = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_keypoints;
        break;
      }
      
      // optional .sfm.Keypoints keypoints = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keypoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keypoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_descriptors;
        break;
      }
      
      // optional .sfm.cvMatProto descriptors = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descriptors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_descriptors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sfm.cvMatProto images = 1;
  for (int i = 0; i < this->images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->images(i), output);
  }
  
  // optional .sfm.CameraMatrixProto cameraMatrix = 2;
  if (has_cameramatrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cameramatrix(), output);
  }
  
  // optional .sfm.CameraBodyTransProto cameraBodyTrans = 3;
  if (has_camerabodytrans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->camerabodytrans(), output);
  }
  
  // optional .sfm.MetadataProto metadata = 4;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->metadata(), output);
  }
  
  // optional fixed64 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->id(), output);
  }
  
  // optional fixed64 seq = 6;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->seq(), output);
  }
  
  // optional float baseline = 8;
  if (has_baseline()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->baseline(), output);
  }
  
  // optional .sfm.CvRectProto roi = 9;
  if (has_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->roi(), output);
  }
  
  // optional .sfm.Keypoints keypoints = 10;
  if (has_keypoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->keypoints(), output);
  }
  
  // optional .sfm.cvMatProto descriptors = 11;
  if (has_descriptors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->descriptors(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sfm.cvMatProto images = 1;
  for (int i = 0; i < this->images_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->images(i), target);
  }
  
  // optional .sfm.CameraMatrixProto cameraMatrix = 2;
  if (has_cameramatrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cameramatrix(), target);
  }
  
  // optional .sfm.CameraBodyTransProto cameraBodyTrans = 3;
  if (has_camerabodytrans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->camerabodytrans(), target);
  }
  
  // optional .sfm.MetadataProto metadata = 4;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->metadata(), target);
  }
  
  // optional fixed64 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->id(), target);
  }
  
  // optional fixed64 seq = 6;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->seq(), target);
  }
  
  // optional float baseline = 8;
  if (has_baseline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->baseline(), target);
  }
  
  // optional .sfm.CvRectProto roi = 9;
  if (has_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->roi(), target);
  }
  
  // optional .sfm.Keypoints keypoints = 10;
  if (has_keypoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->keypoints(), target);
  }
  
  // optional .sfm.cvMatProto descriptors = 11;
  if (has_descriptors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->descriptors(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .sfm.CameraMatrixProto cameraMatrix = 2;
    if (has_cameramatrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameramatrix());
    }
    
    // optional .sfm.CameraBodyTransProto cameraBodyTrans = 3;
    if (has_camerabodytrans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camerabodytrans());
    }
    
    // optional .sfm.MetadataProto metadata = 4;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
    // optional fixed64 id = 5;
    if (has_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 seq = 6;
    if (has_seq()) {
      total_size += 1 + 8;
    }
    
    // optional float baseline = 8;
    if (has_baseline()) {
      total_size += 1 + 4;
    }
    
    // optional .sfm.CvRectProto roi = 9;
    if (has_roi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roi());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .sfm.Keypoints keypoints = 10;
    if (has_keypoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keypoints());
    }
    
    // optional .sfm.cvMatProto descriptors = 11;
    if (has_descriptors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->descriptors());
    }
    
  }
  // repeated .sfm.cvMatProto images = 1;
  total_size += 1 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameProto::MergeFrom(const FrameProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  images_.MergeFrom(from.images_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cameramatrix()) {
      mutable_cameramatrix()->::sfm::CameraMatrixProto::MergeFrom(from.cameramatrix());
    }
    if (from.has_camerabodytrans()) {
      mutable_camerabodytrans()->::sfm::CameraBodyTransProto::MergeFrom(from.camerabodytrans());
    }
    if (from.has_metadata()) {
      mutable_metadata()->::sfm::MetadataProto::MergeFrom(from.metadata());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_baseline()) {
      set_baseline(from.baseline());
    }
    if (from.has_roi()) {
      mutable_roi()->::sfm::CvRectProto::MergeFrom(from.roi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_keypoints()) {
      mutable_keypoints()->::sfm::Keypoints::MergeFrom(from.keypoints());
    }
    if (from.has_descriptors()) {
      mutable_descriptors()->::sfm::cvMatProto::MergeFrom(from.descriptors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameProto::CopyFrom(const FrameProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameProto::IsInitialized() const {
  
  return true;
}

void FrameProto::Swap(FrameProto* other) {
  if (other != this) {
    images_.Swap(&other->images_);
    std::swap(cameramatrix_, other->cameramatrix_);
    std::swap(camerabodytrans_, other->camerabodytrans_);
    std::swap(metadata_, other->metadata_);
    std::swap(id_, other->id_);
    std::swap(seq_, other->seq_);
    std::swap(baseline_, other->baseline_);
    std::swap(roi_, other->roi_);
    std::swap(keypoints_, other->keypoints_);
    std::swap(descriptors_, other->descriptors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameProto_descriptor_;
  metadata.reflection = FrameProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sfm

// @@protoc_insertion_point(global_scope)
