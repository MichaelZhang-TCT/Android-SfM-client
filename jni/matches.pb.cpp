// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "matches.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sfm {

namespace {

const ::google::protobuf::Descriptor* DMatches_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DMatches_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchesProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchesProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_matches_2eproto() {
  protobuf_AddDesc_matches_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "matches.proto");
  GOOGLE_CHECK(file != NULL);
  DMatches_descriptor_ = file->message_type(0);
  static const int DMatches_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMatches, queryidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMatches, trainidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMatches, imgidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMatches, distance_),
  };
  DMatches_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DMatches_descriptor_,
      DMatches::default_instance_,
      DMatches_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMatches, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMatches, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DMatches));
  MatchesProto_descriptor_ = file->message_type(1);
  static const int MatchesProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchesProto, imagelseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchesProto, imagerseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchesProto, matches_),
  };
  MatchesProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchesProto_descriptor_,
      MatchesProto::default_instance_,
      MatchesProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchesProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchesProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchesProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_matches_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DMatches_descriptor_, &DMatches::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchesProto_descriptor_, &MatchesProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_matches_2eproto() {
  delete DMatches::default_instance_;
  delete DMatches_reflection_;
  delete MatchesProto::default_instance_;
  delete MatchesProto_reflection_;
}

void protobuf_AddDesc_matches_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmatches.proto\022\003sfm\"P\n\010DMatches\022\020\n\010quer"
    "yIdx\030\001 \001(\r\022\020\n\010trainIdx\030\002 \001(\r\022\016\n\006imgIdx\030\003"
    " \001(\r\022\020\n\010distance\030\004 \001(\002\"T\n\014MatchesProto\022\021"
    "\n\timageLseq\030\001 \001(\006\022\021\n\timageRseq\030\002 \001(\006\022\036\n\007"
    "matches\030\003 \003(\0132\r.sfm.DMatchesB)\n\024cvg.sfmP"
    "ipeline.mainB\021MatchesOutMessage", 231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "matches.proto", &protobuf_RegisterTypes);
  DMatches::default_instance_ = new DMatches();
  MatchesProto::default_instance_ = new MatchesProto();
  DMatches::default_instance_->InitAsDefaultInstance();
  MatchesProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_matches_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_matches_2eproto {
  StaticDescriptorInitializer_matches_2eproto() {
    protobuf_AddDesc_matches_2eproto();
  }
} static_descriptor_initializer_matches_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DMatches::kQueryIdxFieldNumber;
const int DMatches::kTrainIdxFieldNumber;
const int DMatches::kImgIdxFieldNumber;
const int DMatches::kDistanceFieldNumber;
#endif  // !_MSC_VER

DMatches::DMatches()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DMatches::InitAsDefaultInstance() {
}

DMatches::DMatches(const DMatches& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DMatches::SharedCtor() {
  _cached_size_ = 0;
  queryidx_ = 0u;
  trainidx_ = 0u;
  imgidx_ = 0u;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DMatches::~DMatches() {
  SharedDtor();
}

void DMatches::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DMatches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DMatches::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DMatches_descriptor_;
}

const DMatches& DMatches::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matches_2eproto();  return *default_instance_;
}

DMatches* DMatches::default_instance_ = NULL;

DMatches* DMatches::New() const {
  return new DMatches;
}

void DMatches::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    queryidx_ = 0u;
    trainidx_ = 0u;
    imgidx_ = 0u;
    distance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DMatches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 queryIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queryidx_)));
          set_has_queryidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trainIdx;
        break;
      }
      
      // optional uint32 trainIdx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trainIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trainidx_)));
          set_has_trainidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_imgIdx;
        break;
      }
      
      // optional uint32 imgIdx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imgIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgidx_)));
          set_has_imgidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_distance;
        break;
      }
      
      // optional float distance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DMatches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 queryIdx = 1;
  if (has_queryidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queryidx(), output);
  }
  
  // optional uint32 trainIdx = 2;
  if (has_trainidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trainidx(), output);
  }
  
  // optional uint32 imgIdx = 3;
  if (has_imgidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->imgidx(), output);
  }
  
  // optional float distance = 4;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DMatches::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 queryIdx = 1;
  if (has_queryidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queryidx(), target);
  }
  
  // optional uint32 trainIdx = 2;
  if (has_trainidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trainidx(), target);
  }
  
  // optional uint32 imgIdx = 3;
  if (has_imgidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->imgidx(), target);
  }
  
  // optional float distance = 4;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DMatches::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 queryIdx = 1;
    if (has_queryidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queryidx());
    }
    
    // optional uint32 trainIdx = 2;
    if (has_trainidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trainidx());
    }
    
    // optional uint32 imgIdx = 3;
    if (has_imgidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imgidx());
    }
    
    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DMatches::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DMatches* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DMatches*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DMatches::MergeFrom(const DMatches& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queryidx()) {
      set_queryidx(from.queryidx());
    }
    if (from.has_trainidx()) {
      set_trainidx(from.trainidx());
    }
    if (from.has_imgidx()) {
      set_imgidx(from.imgidx());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DMatches::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DMatches::CopyFrom(const DMatches& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DMatches::IsInitialized() const {
  
  return true;
}

void DMatches::Swap(DMatches* other) {
  if (other != this) {
    std::swap(queryidx_, other->queryidx_);
    std::swap(trainidx_, other->trainidx_);
    std::swap(imgidx_, other->imgidx_);
    std::swap(distance_, other->distance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DMatches::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DMatches_descriptor_;
  metadata.reflection = DMatches_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchesProto::kImageLseqFieldNumber;
const int MatchesProto::kImageRseqFieldNumber;
const int MatchesProto::kMatchesFieldNumber;
#endif  // !_MSC_VER

MatchesProto::MatchesProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchesProto::InitAsDefaultInstance() {
}

MatchesProto::MatchesProto(const MatchesProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchesProto::SharedCtor() {
  _cached_size_ = 0;
  imagelseq_ = GOOGLE_ULONGLONG(0);
  imagerseq_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchesProto::~MatchesProto() {
  SharedDtor();
}

void MatchesProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchesProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchesProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchesProto_descriptor_;
}

const MatchesProto& MatchesProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matches_2eproto();  return *default_instance_;
}

MatchesProto* MatchesProto::default_instance_ = NULL;

MatchesProto* MatchesProto::New() const {
  return new MatchesProto;
}

void MatchesProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    imagelseq_ = GOOGLE_ULONGLONG(0);
    imagerseq_ = GOOGLE_ULONGLONG(0);
  }
  matches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchesProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 imageLseq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &imagelseq_)));
          set_has_imagelseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_imageRseq;
        break;
      }
      
      // optional fixed64 imageRseq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_imageRseq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &imagerseq_)));
          set_has_imagerseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_matches;
        break;
      }
      
      // repeated .sfm.DMatches matches = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_matches;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchesProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 imageLseq = 1;
  if (has_imagelseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->imagelseq(), output);
  }
  
  // optional fixed64 imageRseq = 2;
  if (has_imagerseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->imagerseq(), output);
  }
  
  // repeated .sfm.DMatches matches = 3;
  for (int i = 0; i < this->matches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->matches(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchesProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 imageLseq = 1;
  if (has_imagelseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->imagelseq(), target);
  }
  
  // optional fixed64 imageRseq = 2;
  if (has_imagerseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->imagerseq(), target);
  }
  
  // repeated .sfm.DMatches matches = 3;
  for (int i = 0; i < this->matches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->matches(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchesProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 imageLseq = 1;
    if (has_imagelseq()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 imageRseq = 2;
    if (has_imagerseq()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .sfm.DMatches matches = 3;
  total_size += 1 * this->matches_size();
  for (int i = 0; i < this->matches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matches(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchesProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchesProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchesProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchesProto::MergeFrom(const MatchesProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  matches_.MergeFrom(from.matches_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagelseq()) {
      set_imagelseq(from.imagelseq());
    }
    if (from.has_imagerseq()) {
      set_imagerseq(from.imagerseq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchesProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchesProto::CopyFrom(const MatchesProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchesProto::IsInitialized() const {
  
  return true;
}

void MatchesProto::Swap(MatchesProto* other) {
  if (other != this) {
    std::swap(imagelseq_, other->imagelseq_);
    std::swap(imagerseq_, other->imagerseq_);
    matches_.Swap(&other->matches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchesProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchesProto_descriptor_;
  metadata.reflection = MatchesProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sfm

// @@protoc_insertion_point(global_scope)
